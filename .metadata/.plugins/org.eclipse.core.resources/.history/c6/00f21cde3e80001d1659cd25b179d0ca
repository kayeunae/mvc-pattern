package controller;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import DAO.MemberDAO;

//service메소드 오버라이딩하지 않는 MVC패턴 방식

//디폴트 서블릿(/): 모든 요청이 이쪽으로 옴
@WebServlet("/")
public class MemberController extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    public MemberController() {
        super();
    }
    
    //get방식이든, post방식이든 doPro메소드를 실행시킨다.
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//컨트롤러로 넘어올 때는 인코딩을 해줘야 한다.
		request.setCharacterEncoding("UTF-8");	
		doPro(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");	
		doPro(request, response);
	}
	
	protected void doPro(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//매개변수로 받아올 때는 인코딩X 갠춘 !
		
		//context : tomcat에서 생성하는 요소. 웹 어플리케이션 하나당 하나의 servletcontext가 생성된다. 웹어플리케이션의 자원을 관리하고, 종료되면 사라진다.
		String context = request.getContextPath(); //contextPath: 톰캣의 context Path를 가져온다. (server.xml 156행의 path="/HRD_1234")
		String command = request.getServletPath(); //getServletPath : 파일명만 가져온다. (인터넷 주소 경로의 마지막 파일명을 가져옴)
		String site = null;
		
		System.out.println(context + ", " + command);
		
		MemberDAO member = new MemberDAO();
		
		switch (command) {
		case "/home":
			site = "index.jsp";
			break;
		case "/insert":
			site = member.insert(request, response);
			break;
		case "/list":
			site = member.selectAll(request, response);
			break;
		case "/add":
			site = member.nextCustno(request, response);
			break;
		case "/modify":
			site = member.nextCustno(request, response);
			break;
		case "/update":
			site = member.nextCustno(request, response);
			break;
		}
		getServletContext().getRequestDispatcher("/" + site).forward(request, response);
	}

}
